{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/Header.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","homeworld","id","className","alt","src","CardList","robots","map","user","i","key","Searchbox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","Header","nextProps","nextState","Component","ErrorBoundary","state","hasError","error","info","this","setState","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLocaleLowerCase","includes","SearchBox","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","err","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"6SAeeA,EAbF,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,UAAWC,EAAS,EAATA,GAC7B,OAEI,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAA1B,4BACpB,6BACI,4BAAKF,GACL,2BAAIC,OCMLK,EAXE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEhB,OACI,6BACIA,EAAOC,KAAI,SAACC,EAAMC,GACd,OAAO,kBAAC,EAAD,CAAMC,IAAMJ,EAAOG,GAAGR,GAAKA,GAAKK,EAAOG,GAAGR,GAAKF,KAAOO,EAAOG,GAAGV,KAAOC,UAAYM,EAAOG,GAAGT,iBCErGW,EATG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACjB,OACA,yBAAKV,UAAU,OACX,2BAAOA,UAAU,mCACjBW,KAAK,SAASC,YAAY,aAAaC,SAAWH,MCI3CI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEJ,EAAMK,WCKLC,E,8LALWC,EAAWC,GAAY,OAAO,I,+BAEzC,OAAS,6BAAK,wBAAIvB,UAAU,MAAd,oB,GAJRwB,aCoBNC,E,YAnBX,WAAYV,GAAO,IAAD,8BACd,4CAAMA,KACDW,MAAQ,CACTC,UAAU,GAHA,E,+EAOAC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACJ,sCAEJG,KAAKf,MAAMK,a,GAjBEI,aCiCtBQ,G,kMAEkBF,KAAKf,MAAMkB,oB,+BAGvB,IAAD,EACoDH,KAAKf,MAAxDmB,EADD,EACCA,YAAaC,EADd,EACcA,eAAgB/B,EAD9B,EAC8BA,OAAQgC,EADtC,EACsCA,UACvCC,EAAiBjC,EAAOkC,QAAO,SAAAC,GACnC,OAAOA,EAAM1C,KAAK2C,oBAAoBC,SAASP,EAAYM,wBAG7D,OAAOJ,EAAY,0CAEf,yBAAKpC,UAAU,MACb,kBAAC,EAAD,MACA,kBAAC0C,EAAD,CAAWhC,aAAeyB,IAC1B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU/B,OAASiC,W,GAlBfb,cA2BHmB,eAxCS,SAAAjB,GACtB,MAAO,CACLQ,YAAaR,EAAMkB,aAAaV,YAAa9B,OAAQsB,EAAMmB,cAAczC,OACzEgC,UAAWV,EAAMmB,cAAcT,UAAWR,MAAOF,EAAMmB,cAAcjB,UAG9C,SAACkB,GAC1B,MAAO,CACLX,eAAgB,SAACY,GAAD,OAAWD,ECzBU,CAAEnC,KCLT,qBDKmCqC,QDyBdD,EAAME,OAAOC,SAChEjB,gBAAiB,kBAAMa,GCxBQ,SAACA,GAChCA,EAAS,CAAEnC,KCNuB,2BDOlCwC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAI,OAAIT,EAAS,CAAEnC,KCRO,yBDQuBqC,QAASO,OAC/DC,OAAM,SAAAC,GAAG,OAAIX,EAAS,CAAEnC,KCRM,wBDQuBqC,QAASS,cDkDtDd,CAA6CX,GGlDtD0B,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTb,MAAK,SAAAkB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB9C,QACfyC,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,iHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5Bd,OAAM,SAAA5B,GACLgD,QAAQhD,MAAM,4CAA6CA,MC3FjE,IAAMoD,EAAqB,CAAE9C,YAAa,IAYpC+C,EAAqB,CAAE7C,WAAW,EAAOhC,OAAQ,GAAIwB,MAAO,ICL5DsD,G,MAASC,0BACTC,EAAcC,YAAgB,CAAEzC,aDNV,WAAgD,IAA9ClB,EAA6C,uDAArCsD,EAAoBM,EAAiB,uDAAR,GAC/D,OAAOA,EAAO3E,MACV,IFT0B,qBEUtB,OAAO4E,OAAOC,OAAO,GAAI9D,EAAO,CAAEQ,YAAaoD,EAAOtC,UAC1D,QACI,OAAOtB,ICCiCmB,cDMvB,WAAgD,IAA9CnB,EAA6C,uDAArCuD,EAAoBK,EAAiB,uDAAR,GAChE,OAAOA,EAAO3E,MACV,IFnB8B,yBEoB1B,OAAO4E,OAAOC,OAAO,GAAI9D,EAAO,CAAEU,WAAW,IACjD,IFpB8B,yBEqB1B,OAAOmD,OAAOC,OAAO,GAAI9D,EAAO,CAAEtB,OAAQkF,EAAOtC,QAASZ,WAAW,IACzE,IFrB6B,wBEsBzB,OAAOmD,OAAOC,OAAO,GAAI9D,EAAO,CAAEE,MAAO0D,EAAOtC,QAASZ,WAAW,IACxE,QACI,OAAOV,MCdb+D,EAAQC,YAAYN,EAAaO,YAAgBC,IAAiBV,IAIxEW,IAASC,OAAO,kBAAC,IAAD,CAAUL,MAAQA,GAAlB,IAA2B,kBAAC,EAAD,MAA3B,KAAgDM,SAASC,eAAe,SFIjF,SAAkB9B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI8B,IAAIC,mBAAwBtC,OAAOC,SAASsC,MACpDC,SAAWxC,OAAOC,SAASuC,OAIvC,OAGFxC,OAAOyC,iBAAiB,QAAQ,WAC9B,IAAMpC,EAAK,UAAMiC,mBAAN,sBAEPxC,IAgEV,SAAiCO,EAAOC,GAEtCf,MAAMc,EAAO,CACXqC,QAAS,CAAE,iBAAkB,YAE5BlD,MAAK,SAAAC,GAEJ,IAAMkD,EAAclD,EAASiD,QAAQE,IAAI,gBAEnB,MAApBnD,EAASoD,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CvC,UAAUC,cAAcuC,MAAMvD,MAAK,SAAAkB,GACjCA,EAAasC,aAAaxD,MAAK,WAC7BQ,OAAOC,SAASgD,eAKpB7C,EAAgBC,EAAOC,MAG1BV,OAAM,WACLoB,QAAQC,IACN,oEAvFAiC,CAAwB7C,EAAOC,GAI/BC,UAAUC,cAAcuC,MAAMvD,MAAK,WACjCwB,QAAQC,IACN,iHAMJb,EAAgBC,EAAOC,OE3B/BE,K","file":"static/js/main.f2a38a06.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, homeworld, id }) => {\r\n    return(\r\n        // <h1>RoboFriends</h1>\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robot' src={`https://robohash.org/${id}?set=set1;size=200x200`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{homeworld}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js';\r\n\r\n\r\nconst CardList = ({ robots }) => {\r\n    // if (true) throw new Error(\"aaaaaahah!\");\r\n    return (\r\n        <div>{ \r\n            robots.map((user, i) => { \r\n                return <Card key={ robots[i].id } id={ robots[i].id } name={ robots[i].name } homeworld={ robots[i].homeworld }/>\r\n            })\r\n        }</div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Searchbox = ({ searchChange }) => {\r\n    return (\r\n    <div className='pa2'>\r\n        <input className='pa3 ba b--green bg-lightest-blue' \r\n        type='search' placeholder='character?' onChange={ searchChange } />\r\n    </div>    \r\n    );\r\n  }\r\n  \r\nexport default Searchbox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {    \r\n    return (\r\n        <div style={{ overflowY: 'scroll', border: '1px solid black', height: '600px' }}>\r\n            { props.children }\r\n        </div>\r\n    );\r\n  }\r\n  \r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\n\r\nclass Header extends Component {\r\n\r\n    shouldComponentUpdate(nextProps, nextState){ return false; }\r\n\r\n    render() { return ( <div><h1 className=\"f1\">Robofriends</h1></div> ) }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render(){\r\n        if (this.state.hasError){\r\n            return <h1>Error!</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { setSearchField, requestRobots } from '../actions.js';\r\n\r\nimport CardList from '../components/CardList.js';\r\nimport SearchBox from '../components/SearchBox.js'\r\nimport Scroll from '../components/Scroll.js'\r\nimport Header from '../components/Header.js'\r\nimport ErrorBoundary from '../components/ErrorBoundary.js'\r\n\r\nimport './App.css';\r\n\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n  const whyDidYouRender = require('@welldone-software/why-did-you-render');\r\n  whyDidYouRender(React, {\r\n    trackAllPureComponents: true,\r\n  });\r\n}\r\n\r\n\r\nconst mapStateToProps = state => { \r\n  return { \r\n    searchField: state.searchRobots.searchField, robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending, error: state.requestRobots.error }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return { \r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n};\r\n\r\nclass App extends Component { \r\n\r\n  componentDidMount() { this.props.onRequestRobots() }\r\n\r\n\r\n  render() {\r\n    const { searchField, onSearchChange, robots, isPending } = this.props;\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLocaleLowerCase().includes(searchField.toLocaleLowerCase())\r\n    })\r\n\r\n    return isPending ? <h1>loading...</h1> :\r\n      (\r\n        <div className='tc'>\r\n          <Header />\r\n          <SearchBox searchChange={ onSearchChange }/>\r\n          <Scroll>\r\n            <ErrorBoundary>\r\n              <CardList robots={ filteredRobots }/> \r\n            </ErrorBoundary>            \r\n          </Scroll>          \r\n        </div>\r\n      );\r\n       \r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { \r\n    CHANGE_SEARCHFIELD, \r\n    REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED\r\n} from \"./constants.js\";\r\n\r\nexport const setSearchField = (text) => ({ type: CHANGE_SEARCHFIELD, payload: text })\r\n\r\nexport const requestRobots = () => (dispatch) => { \r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response=> response.json())\r\n      .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n      .catch(err => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err }))\r\n }","export const CHANGE_SEARCHFIELD = \"CHANGE_SEARCHFIELD\";\r\n\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { \r\n    CHANGE_SEARCHFIELD, \r\n    REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED\r\n} from \"./constants.js\";\r\n\r\nconst initialStateSearch = { searchField: \"\" }\r\n\r\nexport const searchRobots = ( state = initialStateSearch, action = {} ) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCHFIELD:\r\n            return Object.assign({}, state, { searchField: action.payload });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nconst initialStateRobots = { isPending: false, robots: [], error: \"\" }\r\n\r\nexport const requestRobots = ( state = initialStateRobots, action = {} ) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true })\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false })\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { searchRobots, requestRobots } from './reducers.js'; \r\nimport 'tachyons';\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\n\r\n// const store = createStore(searchRobots);\r\n\r\nReactDOM.render(<Provider store={ store }> <App /> </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}